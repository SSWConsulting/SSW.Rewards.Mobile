@using SSW.Rewards.Shared.DTOs.Rewards
@using SSW.Rewards.Admin.UI.Helpers
@using SSW.Rewards.Enums
@using Icons = MudBlazor.Icons
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Add Reward</MudText>    
    </TitleContent>
    <DialogContent>
        <MudForm  @ref="_form" Model="@Dto" @bind-IsValid="@valid">
            <MudStack Spacing="5">
                <MudTextField Class="d-inline" T="string" Label="Reward Name" @bind-Value="@Dto.Name" AutoFocus="true" Required="true"/>
                <MudTextField Class="d-inline" T="string" Label="Reward Description" @bind-Value="@Dto.Description" AutoFocus="true" Required="true"/>
                <MudTextField Class="d-inline" T="int" Label="Reward Cost" @bind-Value="@Dto.Cost" Required="true"/>
                <MudTextField Class="d-inline" T="string" Label="Thumbnail Image" @bind-Value="@Dto.ImageFileName" Required="false" Disabled="true" />
                <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="SetThumbnailImage" MaximumFileCount="1">
                    <ButtonTemplate>
                        <MudButton HtmlTag="label"
                        Variant="Variant.Filled"
                        Color="Color.Primary"
                        StartIcon="@Icons.Material.Filled.CloudUpload"
                        for="@context.Id">
                            Upload Thumbnail Image
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>     
                
                <MudTextField Class="d-inline" T="string" Label="Carousel Image" @bind-Value="@Dto.CarouselImageFileName" Required="false" Disabled="true" />
                <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="SetCarouselImage" MaximumFileCount="1">
                    <ButtonTemplate>
                        <MudButton HtmlTag="label"
                        Variant="Variant.Filled"
                        Color="Color.Primary"
                        StartIcon="@Icons.Material.Filled.CloudUpload"
                        for="@context.Id">
                            Upload Carousel Image
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>
                <MudCheckBox T="bool" Label="Display on Carousel" Class="m-0" @bind-value="@Dto.IsCarousel" Validation="@(new Func<bool, string>(IsCarouselImage))" />
                <MudStack Row="false">
                    <MudItem xs="4">
                        <MudText>Reward type</MudText>
                    </MudItem>
                    <MudToggleGroup T="RewardType" @bind-Value="Dto.RewardType">
                        <MudToggleItem Value="@(RewardType.Digital)" Text="Digital" />
                        <MudToggleItem Value="@(RewardType.Physical)" Text="Physical" />
                    </MudToggleGroup>
                </MudStack>
                <MudCheckBox T="bool" Label="Hidden on Mobile" Class="m-0" @bind-value="@Dto.IsHidden" />
            </MudStack>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled"
        Color="Color.Primary"
        OnClick="Submit">
            Create
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public RewardEditDto Dto { get; set; } = new();

    private MudForm? _form;
    private bool valid;

    private async Task SetThumbnailImage(IBrowserFile file)
    {
        try
        {
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            
            (string base64, string name) = await PhotoUploadHelper.UploadPhoto(file);

            Dto.ImageBytesInBase64 = base64;
            Dto.ImageFileName = name;
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to upload Thumbnail Image - " + ex.Message, Severity.Error);
        }
    }    

    private async Task SetCarouselImage(IBrowserFile file)
    {
        try
        {
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            
            (string base64, string name) = await PhotoUploadHelper.UploadPhoto(file);

            Dto.CarouselImageBytesInBase64 = base64;
            Dto.CarouselImageFileName = name;
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to upload Carousel Image - " + ex.Message, Severity.Error);
        }
    }    
    
    private string IsCarouselImage(bool isCarousel)
    {
        if (isCarousel && (String.IsNullOrEmpty(Dto.CarouselImageBytesInBase64)))
        {
            return "Carousel image is required when displaying on carousel";
        }

        return null;
    }
    
    private async Task Submit()
    {
        if (_form is not null)
        {
            await _form.Validate();   
        }
        if (valid)
        {
            MudDialog?.Close(DialogResult.Ok(Dto));
        }
    }
    
    void Cancel() => MudDialog?.Cancel();

    private void RewardTypeChanged<T>(T obj)
    {
        
    }

}