@using Microsoft.AspNetCore.Components
@using SSW.Rewards.Admin.UI.Components.Dialogs.Confirmations
@using SSW.Rewards.Admin.UI.Models.Interfaces
@using MudBlazor
@using SSW.Rewards.Admin.UI.Helpers
@using SSW.Rewards.Shared.DTOs.Leaderboard
@using SSW.Rewards.Shared.DTOs.Rewards
@using SSW.Rewards.ApiClient.Services
@using SSW.Rewards.Enums
@using Icons = MudBlazor.Icons

@inject ISnackbar Snackbar
@inject ILeaderboardService leaderboardService
@inject IDialogService DialogService

<MudDialog>
    <TitleContent>
        
    </TitleContent>
    <DialogContent>
        <MudStack Spacing="5">
            <MudStack Row="true" Justify="Justify.SpaceBetween" Class="align-items-center">
                <AdminQRCode Height="150" QRCodeString="@Dto.Code"/>
                <MudStack>
                    <MudTextField @bind-Value="@Dto.Code" Label="Code" ReadOnly="true" Disabled="true"/>
                    <MudTextField @bind-Value="@Dto.Name" Label="Name" ReadOnly="true" Disabled="true"/>
                </MudStack>
            </MudStack>
            <MudTextField @bind-Value="@Dto.Cost" Label="Cost" AutoFocus="true"/>
            <MudTextField Class="d-inline" T="string" Label="Reward Description" @bind-Value="@Dto.Description" AutoFocus="true" Required="true"/>
            <MudSelect
                @bind-Value="_selectedValue"
                T="@LeaderboardUserDto"
                Label="Assign to User"
                AnchorOrigin="Origin.TopCenter"
                TransformOrigin="Origin.BottomCenter"
                Variant="Variant.Outlined"
                AdornmentIcon="@Icons.Material.Filled.Search"
                AdornmentColor="Color.Primary">
                @foreach (var usr in _usersList.OrderBy(u => u.Name))
                {
                    <MudSelectItem Value="@usr">@usr.Name</MudSelectItem>
                }
            </MudSelect>
            <MudStack Row="true" Justify="Justify.SpaceBetween" Class="align-items-center">
                @if (!string.IsNullOrEmpty(Dto.ImageUri))
                {
                    <MudImage id="profileImg" Src="@Dto.ImageUri" Height="100" Width="100" Elevation="1" Alt="Reward thumbnail image"/>
                }
                else
                {
                    <MudPaper Height="100px" Width="100px" SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave">
                        <MudText Typo="Typo.body1">No Image</MudText>
                    </MudPaper>
                }

                <MudStack Class="w-100" Row="false">
                    <MudTextField Class="d-inline" T="string" Label="Thumbnail Image" @bind-Value="@Dto.ImageFileName" Required="false" Disabled="true" />
                    <MudStack Class="w-100" Row="true">
                        <MudFileUpload Class="w-50" T="IBrowserFile" Accept=".png, .jpg" FilesChanged="SetThumbnailImage" MaximumFileCount="1">
                            <ButtonTemplate>
                                <MudButton HtmlTag="label"
                                           Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.CloudUpload"
                                           for="@context.Id">
                                    Upload
                                </MudButton>
                            </ButtonTemplate>
                        </MudFileUpload>
                        <MudIconButton Class="w-25" Icon="@Icons.Material.Filled.Delete" @onclick="RemoveThumbnailImage"/>
                    </MudStack>
                </MudStack>
            </MudStack>            
            <MudStack Row="true" Justify="Justify.SpaceBetween" Class="align-items-center">
                @if (!string.IsNullOrEmpty(Dto.CarouselImageUri))
                {
                    <MudImage id="profileImg" Src="@Dto.CarouselImageUri" Height="100" Width="100" Elevation="1" Alt="Reward thumbnail image"/>
                }
                else
                {
                    <MudPaper Height="100px" Width="100px" SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave">
                        <MudText Typo="Typo.body1">No Image</MudText>
                    </MudPaper>
                }

                <MudStack Class="w-100" Row="false">
                    <MudTextField Class="d-inline" T="string" Label="Carousel Image" @bind-Value="@Dto.CarouselImageFileName" Required="false" Disabled="true" />
                    <MudStack Class="w-100" Row="true">
                        <MudFileUpload Class="w-50" T="IBrowserFile" Accept=".png, .jpg" FilesChanged="SetCarouselImage" MaximumFileCount="1">
                            <ButtonTemplate>
                                <MudButton HtmlTag="label"
                                           Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.CloudUpload"
                                           for="@context.Id">
                                    Upload
                                </MudButton>
                            </ButtonTemplate>
                        </MudFileUpload>
                        <MudIconButton Class="w-25" Icon="@Icons.Material.Filled.Delete" @onclick="RemoveCarouselImage"/>
                    </MudStack>
                </MudStack>
            </MudStack>
            <MudStack Row="false">
                <MudItem xs="4">
                    <MudText>Reward type</MudText>
                </MudItem>
                <MudToggleGroup T="RewardType" @bind-Value="Dto.RewardType">
                    <MudToggleItem Value="@(RewardType.Digital)" Text="Digital" />
                    <MudToggleItem Value="@(RewardType.Physical)" Text="Physical" />
                </MudToggleGroup>
            </MudStack>
            <MudStac Row="true">
                <MudCheckBox T="bool" Label="Display on Carousel" Class="m-0" @bind-value="@Dto.IsCarousel" Validation="@(new Func<bool, string>(IsCarouselImage))" />
                <MudCheckBox T="bool" Label="Hidden on Mobile" Class="m-0" @bind-value="@Dto.IsHidden" />
            </MudStac>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Delete">Delete</MudButton>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton OnClick="AssignReward" Color="Color.Info">Redeem Reward for User</MudButton>
        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public RewardEditDto Dto { get; set; } = new();
    private LeaderboardUserDto? _selectedValue;
    private IEnumerable<LeaderboardUserDto> _usersList = Enumerable.Empty<LeaderboardUserDto>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _usersList = (await leaderboardService.GetLeaderboard(CancellationToken.None)).Users;
        Console.WriteLine($"On init - reward type is {Dto.RewardType}");
    }

    void Submit() => MudDialog?.Close(DialogResult.Ok(Dto));

    void Cancel() => MudDialog?.Cancel();
    async Task Delete()
    {
        var result = await DialogService.Show<SimpleConfirmationDialog>(
            $"Delete \"{Dto.Name}?\"",
            SimpleConfirmationDialog.CreateDialogParams(
                SimpleConfirmationDialogType.Danger,
                "Deleting will prevent future users from claiming points for this reward")
            ).Result;

        if (!result.Canceled && (bool) result.Data)
        {
            MudDialog?.Close(DialogResult.Ok(Dto.Id));
        }
    }

    private async Task SetThumbnailImage(IBrowserFile file)
    {
        try 
        {
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

            (string base64, string name) = await PhotoUploadHelper.UploadPhoto(file);

            Dto.DeleteThumbnailImage = false;
            Dto.ImageBytesInBase64 = base64;
            Dto.ImageFileName = name;
            Dto.ImageUri = $"data:{Dto.ImageFileName};base64,{Dto.ImageBytesInBase64}";
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to upload Thumbnail Image - " + ex.Message, Severity.Error);
        }
    }    
    
    private async Task SetCarouselImage(IBrowserFile file)
    {
        try
        {
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            
            (string base64, string name) = await PhotoUploadHelper.UploadPhoto(file);

            Dto.DeleteCarouselImage = false;
            Dto.CarouselImageBytesInBase64 = base64;
            Dto.CarouselImageFileName = name;
            Dto.CarouselImageUri = $"data:{Dto.CarouselImageFileName};base64,{Dto.CarouselImageBytesInBase64}";
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to upload Carousel Image - " + ex.Message, Severity.Error);
        }
    }    

    private string IsCarouselImage(bool isCarousel)
    {
        if (isCarousel && (String.IsNullOrEmpty(Dto.CarouselImageBytesInBase64)))
        {
            return "Carousel image is required when displaying on carousel";
        }

        return null;
    }
    
    private void RemoveThumbnailImage()
    {
        Dto.ImageBytesInBase64 = string.Empty;
        Dto.ImageFileName = string.Empty;
        Dto.ImageUri = string.Empty;
        Dto.DeleteThumbnailImage = true;
    }    
    
    private void RemoveCarouselImage()
    {
        Dto.CarouselImageBytesInBase64 = string.Empty;
        Dto.CarouselImageFileName = string.Empty;
        Dto.CarouselImageUri = string.Empty;
        Dto.DeleteCarouselImage = true;
    }
    
    void AssignReward()
    {
        if (_selectedValue == null)
        {
            return;
        }

        MudDialog?.Close(DialogResult.Ok(new AssignReward
        {
            Code = Dto.Code,
            Id = _selectedValue.UserId
        }));
    }
}