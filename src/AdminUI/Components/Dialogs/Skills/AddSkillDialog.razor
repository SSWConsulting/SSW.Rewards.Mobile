@using SSW.Rewards.Shared.DTOs.Skills
@using SSW.Rewards.Admin.UI.Helpers

@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Add Skill</MudText>    
    </TitleContent>
    <DialogContent>
        <MudForm  @ref="_form" Model="@dto" @bind-IsValid="@_valid">
            <MudTextField
                AutoFocus="true"
                Class="d-inline" T="string" Label="Reward Name" @bind-Value="@dto.Name" Required="true"/>
            <MudTextField Class="d-inline" T="string" Label="Image" @bind-Value="@dto.ImageFileName" Required="false" Disabled="true" />
            <DragDropFileUpload OnClick="OnPhotoUploadClick" Label="Upload thumbnail"/>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton 
            Variant="Variant.Filled"
            Color="Color.Primary" OnClick="Submit">Create</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private MudForm? _form;
    private bool _valid;
    
    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public SkillEditDto dto { get; set; } = new SkillEditDto
    {
        Id = 0,
        Name = null,
        ImageUri = null,
        ImageBytesInBase64 = null,
        ImageFileName = null
    };
    
    private async Task OnPhotoUploadClick(InputFileChangeEventArgs e)
    {
        try
        {
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

            (string base64, string name) = await PhotoUploadHelper.UploadPhoto(e);

            dto.ImageBytesInBase64 = base64;
            dto.ImageFileName = name;
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to upload the photo - " + ex.Message, Severity.Error);
        }
    }
    
    private async Task Submit()
    {
        if (_form is not null)
        {
            await _form.Validate();   
        }
        if (_valid)
        {
            MudDialog?.Close(DialogResult.Ok(dto));
        }
    }
    void Cancel() => MudDialog?.Cancel();
}