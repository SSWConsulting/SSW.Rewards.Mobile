@using SSW.Rewards.Admin.UI.Components.Dialogs.Quizzes
@using SSW.Rewards.ApiClient.Services
@using SSW.Rewards.Shared.DTOs.Quizzes
@using Microsoft.Extensions.Options

@inject IDialogService DialogService
@inject IQuizAdminService QuizAdminService

<MudForm @bind-success="@_success" @bind-errors="@_errors">
    <MudGrid>
        <MudItem xs="12" md="6">
            <MudText Typo="Typo.h4" Class="mb-4">@Model.Title</MudText>
            <MudTextField T="string" Label="Title" Class="mb-10" Required="true" RequiredError="Required" @bind-Value="@Model.Title" />
            <MudTextField T="string" Label="Description" Class="mb-4" Required="true" RequiredError="Required" @bind-Value="@Model.Description" Lines="5" />
            <MudGrid Class="mb-4">
                <MudItem xs="6">
                    <MudTextField T="int" Label="Points" Required="true" RequiredError="Required" @bind-Value="@Model.Points" />
                </MudItem>
                <MudItem xs="6">
                    <MudSelect Class="d-inline" T="Enums.Icons" Label="Icon" @bind-Value="Model.Icon">
                        @foreach (var icon in Enum.GetValues<Enums.Icons>())
                        {
                            <MudSelectItem Value="@icon">@icon.ToString()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>
            <MudGrid>
                <MudItem xs="6">
                    @if (!string.IsNullOrEmpty(_thumbnailImage)) 
                    {
                        <MudImage id="profileImg" Src="@_thumbnailImage" Height="50" Width="50" Elevation="1" Alt="Quiz Carousel image"/>
                    }
                    else
                    {
                        <MudPaper Height="50px" Width="50px" SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave">
                            <MudText Typo="Typo.body1">No Image</MudText>
                        </MudPaper>
                    }
                </MudItem> 
                <MudItem xs="6">
                    <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="SetThumbnailImage" MaximumFileCount="1">
                        <ButtonTemplate>
                            <MudButton HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload"
                                       for="@context.Id">
                                Upload Thumbnail Image
                            </MudButton>
                        </ButtonTemplate>
                    </MudFileUpload>
                </MudItem>
                <MudItem xs="6">
                    @if (!String.IsNullOrEmpty(_carouselImage))
                    {
                        <MudImage id="profileImg" Src="@_carouselImage" Height="250" Width="250" Elevation="1" Alt="Quiz Carousel image"/>
                    }
                    else
                    {
                        <MudPaper Height="250px" Width="250px" SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave">
                            <MudText Typo="Typo.body1">No Image</MudText>
                        </MudPaper>
                    }
                </MudItem>
                <MudItem xs="6">
                    <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="SetCarouselImage" MaximumFileCount="1">
                        <ButtonTemplate>
                            <MudButton HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload"
                                       for="@context.Id">
                                Upload Carousel Image
                            </MudButton>
                        </ButtonTemplate>
                    </MudFileUpload>
                    <MudCheckBox T="bool" Label="Display on Carousel" Class="m-0" @bind-value="@Model.IsCarousel" Validation="@(new Func<bool, string>(IsCarouselImage))" />
                    <MudCheckBox T="bool"
                                 Label="Notify users about this quiz"
                                 @bind-Value="Model.NotifyUsers"
                                 HelperText="Sends a push notification to all active users after saving." />
                </MudItem>
            </MudGrid>
            
            <MudButton Variant="Variant.Filled" Class="mt-2" Color="Color.Primary" OnClick="@(() => OnSave())">Save quiz</MudButton>
        </MudItem>
        <MudItem xs="12" md="6">
            <div class="d-flex align-content-between mb-4">
                <MudText Typo="Typo.h4" Class="d-flex flex-1">Questions</MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@((e) => AddQuestionDialog(_disableBackdropClick))">New question</MudButton>
            </div>
            
            @if (Model.Questions != null)
            {
                @foreach (var q in Model.Questions.Where(x => !x.IsDeleted))
                {
                    <MudPaper Class="pa-4 mb-4">
                        <div class="d-flex align-content-between">
                            <MudText Typo="Typo.h6" Class="d-flex flex-1">@q.Text</MudText>
                            <MudIconButton 
                                Color="Color.Primary" 
                                Icon="@Icons.Material.Filled.Edit" 
                                OnClick="@((e) => EditQuestionDialog(_disableBackdropClick, q))" />
                            <MudIconButton 
                                Color="Color.Primary" 
                                Icon="@Icons.Material.Filled.Delete" 
                                OnClick="@((e) => DeleteQuestion(q.QuestionId))"/>
                        </div>
                        <MudList>
                            @foreach (var a in q.Answers)
                            {
                                <MudListItem>
                                    <MudText Style="display: inline-block; vertical-align: middle">@a.Text</MudText>
                                    @if (a.IsCorrect)
                                    {
                                        <MudIcon Size="Size.Medium" Icon="@Icons.Material.Filled.Check" Title="Correct" Class="ml-4" Style="vertical-align: middle" />
                                    }
                                </MudListItem>
                                <MudDivider />
                            }
                        </MudList>
                    </MudPaper>
                }
            }
        </MudItem>
    </MudGrid>

</MudForm>

@code {
    [Parameter]
    public EventCallback<bool> OnSaveClicked { get; set; }

    [Parameter]
    public QuizEditDto Model { get; set; } = new();

    private bool _success;
    private string[] _errors = { };
    private string _carouselImage;
    private string _thumbnailImage;
    private readonly DialogOptions _disableBackdropClick = new() { DisableBackdropClick = true, FullWidth = true, MaxWidth = MaxWidth.Large };
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        _carouselImage = Model.CarouselImage;
        _thumbnailImage = Model.ThumbnailImage;
    }
    
    private async Task AddQuestionDialog(DialogOptions options)
    {
        QuizQuestionEditDto q = new QuizQuestionEditDto { Answers = new List<QuestionAnswerEditDto>() };
        var parameters = new DialogParameters();
        parameters.Add("Dto", q);
        var dialog = DialogService.Show<QuizQuestionDialog>("Create a quiz question", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            // Add the Reward
            if (result.Data is QuizQuestionEditDto dto)
            {
                Model.Questions.Add(dto);
            }
        }
    }
    private async Task OnSave()
    {
        await OnSaveClicked.InvokeAsync(true);
    }
    private async Task EditQuestionDialog(DialogOptions options, QuizQuestionEditDto q)
    {
        var parameters = new DialogParameters();
        parameters.Add("Dto", q);
        var dialog = DialogService.Show<QuizQuestionDialog>("Edit question", parameters, options);
        var result = await dialog.Result;
    }

    private string IsCarouselImage(bool isCarousel)
    {
        if (isCarousel && (String.IsNullOrEmpty(Model.CarouselImage)))
        {
            return "Carousel image is required when displaying on carousel";
        }

        return null;
    }
    
    private async Task SetCarouselImage(IBrowserFile file)
    {
        _carouselImage = await GetData(file);
        Model.CarouselImage = await QuizAdminService.UploadQuizImage(file.OpenReadStream(file.Size), file.Name, CancellationToken.None);
    }    
    
    private async Task SetThumbnailImage(IBrowserFile file)
    {
        _thumbnailImage = await GetData(file);
        Model.ThumbnailImage = await QuizAdminService.UploadQuizImage(file.OpenReadStream(file.Size), file.Name, CancellationToken.None);
    }

    private async Task<string> GetData (IBrowserFile file)
    {
        var buffer = new byte[file.Size];
        var stream = file.OpenReadStream(file.Size);
        await stream.ReadAsync(buffer);
        
        var imageType = file.ContentType;
        
        return $"data:{imageType};base64,{Convert.ToBase64String(buffer)}";
    }

    private void DeleteQuestion(int questionId)
    {
        var question = Model.Questions.FirstOrDefault(q => q.QuestionId == questionId);
        question.IsDeleted = true;
    }
}