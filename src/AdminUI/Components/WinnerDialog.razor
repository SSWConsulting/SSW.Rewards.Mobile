@using SSW.Rewards.Shared.DTOs.PrizeDraw
@using SSW.Rewards.Shared.DTOs.Rewards
@using SSW.Rewards.ApiClient.Services

@inject IRewardService RewardService

<MudDialog>
    <TitleContent>
        <div class="d-flex justify-space-between align-center">
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Class="mr-2" />
                @Title
            </MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Close"
                           Color="Color.Inherit"
                           OnClick="CloseDialog"
                           Size="Size.Medium" />
        </div>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="max-height: 500px; overflow-y: auto">
            <MudText Align="Align.Center" Class="mt-4 mb-2">The Winner is:</MudText>
            <MudText Align="Align.Center" Typo="Typo.h3" Color="Color.Success" Class="mb-4">
                <b>@(Winner?.Name)</b>
            </MudText>

            <MudDivider Class="my-4" />

            <MudAutocomplete
                T="RewardDto"
                @bind-Value="@_selectedReward"
                Variant="Variant.Filled"
                Label="Select a Reward"
                AnchorOrigin="Origin.BottomCenter"
                SearchFuncWithCancel="@SearchRewards"
                ShowProgressIndicator="true"
                ToStringFunc="@(r => r?.Name ?? string.Empty)"
                Class="mb-4"
            />

            <MudText Typo="Typo.body2" Color="Color.Info" Class="mb-3">
                Choose a reward to give to the winner, or skip this winner to draw another.
            </MudText>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined"
                   Color="Color.Warning"
                   OnClick="SkipCurrentWinner"
                   Disabled="@_isSkipping">
            <span>Skip Winner</span>
        </MudButton>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Success"
                   Disabled="@(_selectedReward == null || _isSkipping)"
                   StartIcon="@Icons.Material.Filled.Celebration"
                   OnClick="ClaimPrize">
            Claim Prize
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    
    [Parameter] public string Title { get; set; } = "Prize Winner!";
    [Parameter] public EligibleUserDto? Winner { get; set; }
    [Parameter] public EventCallback<(EligibleUserDto, RewardDto)> OnClaimPrize { get; set; }
    [Parameter] public EventCallback<EligibleUserDto> OnSkipWinner { get; set; }
    
    private RewardDto? _selectedReward;
    private bool _isSkipping;
    
    private async Task<IEnumerable<RewardDto>> SearchRewards(string value, CancellationToken cancellationToken)
    {
        var rewards = await RewardService.SearchRewards(value, cancellationToken);
        
        // Only show hidden 1-point rewards that were designed for prize draws
        return rewards.Rewards.Where(r => r.Cost == 1);
    }
    
    private async Task ClaimPrize()
    {
        if (Winner != null && _selectedReward != null)
        {
            await OnClaimPrize.InvokeAsync((Winner, _selectedReward));
            MudDialog.Close();
        }
    }
    
    private async Task SkipCurrentWinner()
    {
        if (Winner != null)
        {
            _isSkipping = true;
            await InvokeAsync(StateHasChanged);

            MudDialog.Close();
            await OnSkipWinner.InvokeAsync(Winner);
        }
    }

    private void CloseDialog()
    {
        MudDialog.Close();
    }
}