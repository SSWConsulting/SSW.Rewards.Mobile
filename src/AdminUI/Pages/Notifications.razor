@page "/notifications"

@using MudBlazor
@using SSW.Rewards.Shared.DTOs.Notifications
@inject NavigationManager Navigation
@inject SSW.Rewards.ApiClient.Services.INotificationsService NotificationsService

<MudText Typo="Typo.h2">Notifications</MudText>
<MudText Typo="Typo.body1">All notification history</MudText>

<MudPaper Class="pa-4 mt-4 warm-grey-bg">
    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
        <MudTextField @bind-Value="_searchString"
                      Placeholder="Search by title"
                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                      Class="mt-0" Immediate="true"
                      OnKeyDown="@(e => { if (e.Key == "Enter") LoadNotificationsFromSearch(); })"
                      OnBlur="LoadNotificationsFromSearch" />
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@(() => Navigation.NavigateTo("/send-notification"))">
            Send Notification
        </MudButton>
    </MudStack>
    <MudTable ServerData="LoadNotifications" Loading="@_loading" Dense="true" Hover="true" Bordered="true" Striped="true" Class="mt-4" @ref="_table">
        <HeaderContent>
            <MudTh><MudTableSortLabel T="NotificationHistoryDto" SortLabel="Title">Title</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="NotificationHistoryDto" SortLabel="CreatedDateUtc">Created</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="NotificationHistoryDto" SortLabel="Status">Status</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="NotificationHistoryDto" SortLabel="SentOrScheduled">Delivery Date</MudTableSortLabel></MudTh>
            <MudTh>
                <MudTooltip Text="This column shows the number of users who received the notification vs the total number of users we tried to send it to. Reasons for not being delivered include expired device tokens or users never approving/registering for notifications.">
                    <span style="cursor: help;">Delivery<span style="color: red;">*</span></span>
                </MudTooltip>
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="Created">@context.CreatedDateUtc.ToLocalTime().ToString("g")</MudTd>
            <MudTd DataLabel="Status">
                @switch (context.Status)
                {
                    case NotificationStatus.Sent:
                        <MudChip Color="Color.Success" Variant="Variant.Filled">Sent</MudChip>
                        break;
                    case NotificationStatus.Failed:
                        <MudChip Color="Color.Error" Variant="Variant.Filled">Failed</MudChip>
                        break;
                    case NotificationStatus.Scheduled:
                        <MudChip Color="Color.Info" Variant="Variant.Filled">Scheduled</MudChip>
                        break;
                    default:
                        <MudChip Color="Color.Default" Variant="Variant.Filled">Not Sent</MudChip>
                        break;
                }
            </MudTd>
            <MudTd DataLabel="Delivery Date">
                @if (context.Status == NotificationStatus.Sent && context.SentOn != null)
                {
                    @context.SentOn?.ToLocalTime().ToString("g")
                }
                else if (context.Status == NotificationStatus.Scheduled && context.ScheduledDate != null)
                {
                    @context.ScheduledDate?.ToLocalTime().ToString("g") <span> (Scheduled)</span>
                }
                else
                {
                    <span>-</span>
                }
            </MudTd>
            <MudTd DataLabel="Delivery">
                <MudTooltip Text="Sent / Targeted">
                    <span>@context.NumberOfUsersSent / @context.NumberOfUsersTargeted</span>
                </MudTooltip>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 10, 20, 50 }" />
        </PagerContent>
    </MudTable>
</MudPaper>

@code {
    private bool _loading = false;
    private string _searchString = string.Empty;
    private MudTable<NotificationHistoryDto> _table;

    protected override async Task OnInitializedAsync()
    {
        await LoadNotificationsFromSearch();
    }

    private async Task<TableData<NotificationHistoryDto>> LoadNotifications(TableState state)
    {
        _loading = true;
        try
        {
            var page = state.Page;
            var pageSize = state.PageSize > 0 ? state.PageSize : 20;
            var sortLabel = state.SortLabel;
            var sortDirection = state.SortDirection == MudBlazor.SortDirection.None ? null : state.SortDirection.ToString().ToLower();
            var result = await NotificationsService.GetNotificationHistoryListAsync(page, pageSize, _searchString, sortLabel, sortDirection, CancellationToken.None);
            return new TableData<NotificationHistoryDto>
            {
                Items = result.Items.ToList(),
                TotalItems = result.Count
            };
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task LoadNotificationsFromSearch()
    {
        if (_table != null)
        {
            await _table.ReloadServerData();
        }
    }
}
