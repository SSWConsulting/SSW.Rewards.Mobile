@page "/notifications"

@using MudBlazor
@using SSW.Rewards.Shared.DTOs.Notifications
@inject NavigationManager Navigation
@inject SSW.Rewards.ApiClient.Services.INotificationsService NotificationsService

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h3" GutterBottom="true">Notifications</MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Class="mb-4" OnClick="@(() => Navigation.NavigateTo("/send-notification"))">
        Send Notification
    </MudButton>
    <MudPaper>
        <MudTable ServerData="LoadNotifications" Loading="@_loading" Dense="true" Hover="true" Bordered="true" Striped="true">
            <HeaderContent>
                <MudTh>Title</MudTh>
                <MudTh>Created</MudTh>
                <MudTh>Was Sent</MudTh>
                <MudTh>Had Errors</MudTh>
                <MudTh>Sent On</MudTh>
                <MudTh>Targeted</MudTh>
                <MudTh>Sent</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Title">@context.Title</MudTd>
                <MudTd DataLabel="Created">@context.CreatedDate.ToString("g")</MudTd>
                <MudTd DataLabel="Was Sent">@(context.WasSent ? "Yes" : "No")</MudTd>
                <MudTd DataLabel="Had Errors">@(context.HasError ? "Yes" : "No")</MudTd>
                <MudTd DataLabel="Sent On">@(context.SentOn?.ToString("g") ?? "-")</MudTd>
                <MudTd DataLabel="Targeted">@context.NumberOfUsersTargeted</MudTd>
                <MudTd DataLabel="Sent">@context.NumberOfUsersSent</MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
</MudContainer>

@code {
    private bool _loading = false;
    private async Task<TableData<NotificationHistoryDto>> LoadNotifications(TableState state)
    {
        _loading = true;
        try
        {
            // MudTable uses 0-based page index
            var page = state.Page;
            var pageSize = state.PageSize > 0 ? state.PageSize : 20;
            var result = await NotificationsService.GetNotificationHistoryListAsync(page, pageSize, CancellationToken.None);
            return new TableData<NotificationHistoryDto>
            {
                Items = result.Items.ToList(),
                TotalItems = result.Count
            };
        }
        finally
        {
            _loading = false;
        }
    }
}
