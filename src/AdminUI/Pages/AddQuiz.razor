@page "/add-quiz"

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@using SSW.Rewards.Admin.UI.Components
@using SSW.Rewards.Admin.UI.Components.Dialogs.Quizzes
@using SSW.Rewards.Admin.UI.Models.Interfaces
@using System.ComponentModel.DataAnnotations
@using SSW.Rewards.Shared.DTOs.Quizzes
@using SSW.Rewards.ApiClient.Services

@attribute [Authorize]
@inject IQuizAdminService quizAdminService

@inject NavigationManager NavManager

<MudText Typo="Typo.h2">Add quiz</MudText>
<MudGrid>
    <MudItem lg="12">
        <QuizDetails Model="_model" OnSaveClicked="DoThing"></QuizDetails>
    </MudItem>
</MudGrid>


@code {

    private MudForm form = new();
    private QuizEditDto _model = new()
    {
        Questions = new List<QuizQuestionEditDto>(),
        NotifyUsers = true
    };
    private async Task DoThing(bool b)
    {
        await SaveQuiz();
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task SaveQuiz()
    {
        try
        {
            int quizId = await quizAdminService.AddNewQuiz(_model, CancellationToken.None);
            //redirect to quizzes page
            NavManager.NavigateTo("/quizzes");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    
}