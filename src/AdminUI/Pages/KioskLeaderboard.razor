@layout KioskLayout
@page "/kiosk-leaderboard"

@using SSW.Rewards.Shared.DTOs.Leaderboard
@using SSW.Rewards.ApiClient.Services
@using SSW.Rewards.Admin.UI.Components
@using SSW.Rewards.Enums

@inject ILeaderboardService leaderboardService

<MudPaper Class="kiosk-leaderboard" Style="padding: 2rem; margin-top: 0.5rem; min-height: 100vh; background: #121212; color: #fafafa;">
    <style>
        .kiosk-tabs .mud-tabs-toolbar {
            justify-content: center;
            background: #222;
            border-radius: 12px;
            padding: 0.3rem;
            gap: 1.2rem;
        }
        .kiosk-tabs .mud-tabs-toolbar .mud-tabs-toolbar-inner {
            min-height: 2.5rem;
        }

        .kiosk-tabs .mud-tab {
            min-height: 2.5rem;
            min-width: 80px !important;
            padding: 0.4rem 1.2rem !important;
            font-size: 1rem;
            color: #fff !important;
            background: #222 !important;
            border-radius: 10px !important;
            margin: 0 0.15rem;
            transition: background 0.2s, color 0.2s;
        }

        .kiosk-tabs .mud-tab.mud-tab-active {
            background: #CC4141 !important;
            color: #fff !important;
            border-radius: 10px !important;
        }

        .kiosk-tabs .mud-tabs-indicator,
        .kiosk-tabs .mud-tab-active .mud-tab-indicator,
        .kiosk-tabs .mud-tab-slider {
            display: none !important;
            height: 0 !important;
        }

        .kiosk-tabs .mud-tabs-scroll-button {
            display: none !important;
        }

        .kiosk-tabs .mud-tooltip-root {
            width: 100%;
        }

        .kiosk-tabs .mud-tabs-toolbar-content .mud-tabs-toolbar-wrapper {
            width: 100%;
            transform: translateX(-2px) !important;
        }

        .kiosk-leaderboard-table .mud-table {
            font-size: 2.2rem;
        }

        .kiosk-leaderboard-table .mud-table-head .mud-table-cell {
            background-color: #525252 !important;
        }

        .kiosk-leaderboard-table .mud-table-row:nth-child(2n) {
            background-color: #333;
        }

        .kiosk-leaderboard-table .mud-table-row:nth-child(2n+1) {
            background-color: #222;
        }

        .kiosk-leaderboard-table .mud-table-cell {
            font-size: 1rem;
            padding: 0.7rem;
        }
    </style>
    <div style="display: flex; flex-direction: column; align-items: center; margin-bottom: 1.25rem;">
        <MudImage Src="/images/ssw-rewards-logo.svg" Class="mb-2" Style="height: 60px; margin: 0 auto; display: block;" />
    </div>
    <div style="display: flex; justify-content: center; align-items: center; margin-bottom: 1rem;">
        <div style="width: 600px; max-width: 100%;">
            <MudTabs @bind-ActivePanelIndex="_activeTabIndex" Rounded="true" Centered="true" OnActivePanelIndexChanged="OnTabChanged" Class="kiosk-tabs" Style="background: transparent; box-shadow: none; width: 100%;">
                <MudTabPanel Text="Week" />
                <MudTabPanel Text="Month" />
                <MudTabPanel Text="Year" />
                <MudTabPanel Text="All Time" />
            </MudTabs>
        </div>
    </div>
    <div style="display: flex; justify-content: center;">
        <div style="width: 600px; max-width: 100%;">
            <MudTable @ref="table" TItem="MobileLeaderboardUserDto" ServerData="@ServerReload" FixedHeader="true" Dense="false" Hover="true" Bordered="false" Striped="false" Class="kiosk-leaderboard-table" Style="border-radius: 16px; box-shadow: 0 4px 24px rgba(0,0,0,0.3); overflow: hidden; background: #181818;">
                <HeaderContent>
                    <MudTh Style="width: 80px; text-align: center;">Rank</MudTh>
                    <MudTh Style="width: 320px;">Name</MudTh>
                    <MudTh Style="width: 160px; text-align: center;">Total Points</MudTh>
                </HeaderContent>
                <RowTemplate Context="row">
                    <MudTd Style="width: 80px; text-align: center;" DataLabel="Rank">@row.Rank</MudTd>
                    <MudTd Style="width: 320px;" DataLabel="Name">
                        <div class="d-flex flex-nowrap gap-2 align-center">
                            <Avatar Url="@row.ProfilePic" />
                            <MudText Typo="Typo.body1">@row.Name</MudText>
                            @if (row.Rank == 1)
                            {
                                <MudText Typo="Typo.body1">👑</MudText>
                            }
                        </div>
                    </MudTd>
                    <MudTd Style="width: 160px; text-align: center;" DataLabel="Points">@row.Points</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="@_pageSizeOptions" />
                </PagerContent>
            </MudTable>
        </div>
    </div>
    @if (!_hasErrorsOnUpdate)
    {
        <div style="text-align: center; margin-top: 2rem; font-size: 1.1rem; color: #ccc;">
            Last updated: @(_lastUpdated != null ? _lastUpdated?.ToString("dd MMMM yyyy HH:mm") : "never")
        </div>
    }
    else
    {
        <div style="text-align: center; margin-top: 2rem; font-size: 1.1rem; color: #FF7A7A;">
            ⚠️ We couldn't refresh the leaderboard. Retrying in 1 min.<br />
            Last updated: @(_lastUpdated != null ? _lastUpdated?.ToString("dd MMMM yyyy HH:mm") : "never")
        </div>
    }
</MudPaper>

@code {
    private MudTable<MobileLeaderboardUserDto> table;
    private LeaderboardFilter _selectedFilter = LeaderboardFilter.ThisWeek;
    private int _activeTabIndex = 0;
    private readonly int[] _pageSizeOptions = new[] { 5, 10, 25, 50, 100, 250 };
    private System.Timers.Timer? _refreshTimer;
    private DateTime? _lastUpdated;
    private bool _hasErrorsOnUpdate = false;

    private TableData<MobileLeaderboardUserDto> _lastTableCache = new() { TotalItems = 0, Items = [] };

    protected override async Task OnInitializedAsync()
    {
        await LoadLeaderboard();

        _refreshTimer = new System.Timers.Timer(60000); // 1 minute
        _refreshTimer.Elapsed += async (_, __) => await InvokeAsync(LoadLeaderboard);
        _refreshTimer.AutoReset = true;
        _refreshTimer.Start();
    }

    private async Task<TableData<MobileLeaderboardUserDto>> ServerReload(TableState state)
    {
        try
        {
            var result = await leaderboardService.GetMobilePaginatedLeaderboard(state.Page, state.PageSize, _selectedFilter, CancellationToken.None);
            _lastUpdated = DateTime.Now;
            _hasErrorsOnUpdate = false;
            _lastTableCache = new() { TotalItems = result.Count, Items = result.Items };
        }
        catch (Exception ex)
        {
            _hasErrorsOnUpdate = true;
            Console.WriteLine($"Error in ServerReload: {ex.Message}");
        }
        StateHasChanged();
        return _lastTableCache;
    }

    private async Task LoadLeaderboard()
    {
        if (table != null)
        {
            await table.ReloadServerData();
        }
    }

    private async Task OnTabChanged(int tabIndex)
    {
        _activeTabIndex = tabIndex;
        _selectedFilter = tabIndex switch
        {
            0 => LeaderboardFilter.ThisWeek,
            1 => LeaderboardFilter.ThisMonth,
            2 => LeaderboardFilter.ThisYear,
            3 => LeaderboardFilter.Forever,
            _ => LeaderboardFilter.ThisWeek
        };

        await LoadLeaderboard();
    }

    public void Dispose()
    {
        if (_refreshTimer != null)
        {
            _refreshTimer.Stop();
            _refreshTimer.Dispose();
            _refreshTimer = null;
        }
    }
}
