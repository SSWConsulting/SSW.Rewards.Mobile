@layout KioskLayout
@page "/kiosk-leaderboard"

@using SSW.Rewards.Shared.DTOs.Leaderboard
@using SSW.Rewards.ApiClient.Services
@using SSW.Rewards.Admin.UI.Components
@using SSW.Rewards.Enums

@inject ILeaderboardService leaderboardService

<MudPaper Class="kiosk-leaderboard" Style="padding: 2rem; min-height: 100vh; background: #111; color: #fff;">
    <div style="position: relative; margin-bottom: 2rem; height: 60px;">
        <MudImage Src="/images/ssw-rewards-logo.svg" Class="mb-0" Style="height: 60px; position: absolute; left: 0; top: 0;" />
        <MudText Typo="Typo.h2" Align="Align.Center" Class="mb-0" Style="font-size: 3rem; margin: 0 auto; display: block; width: fit-content; position: absolute; left: 0; right: 0; top: 50%; transform: translateY(-50%); text-align: center;">Leaderboard</MudText>
    </div>
    <MudStack Row="true" Spacing="2" Class="mb-4" Justify="Justify.Center">
        <MudSelect Value="_selectedFilter" ValueChanged="@((LeaderboardFilter filter) => OnFilterChanged(filter))" Label="Period" Style="min-width: 200px;">
            <MudSelectItem Value="@LeaderboardFilter.ThisWeek">This Week</MudSelectItem>
            <MudSelectItem Value="@LeaderboardFilter.ThisMonth">This Month</MudSelectItem>
            <MudSelectItem Value="@LeaderboardFilter.ThisYear">This Year</MudSelectItem>
            <MudSelectItem Value="@LeaderboardFilter.Forever">All Time</MudSelectItem>
        </MudSelect>
    </MudStack>
    <MudTable @ref="table" TItem="MobileLeaderboardUserDto" ServerData="@ServerReload" FixedHeader="true" Dense="false" Hover="true" Bordered="false" Striped="true" Style="font-size: 2rem;">
        <HeaderContent>
            <MudTh>Rank</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Total Points</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Rank">@context.Rank</MudTd>
            <MudTd DataLabel="Name">
                <div class="d-flex flex-nowrap gap-2 align-center">
                    <Avatar Url="@context.ProfilePic"/>
                    <MudText Typo="Typo.body1">@context.Name</MudText>
                </div>
            </MudTd>
            <MudTd DataLabel="Points">@context.Points</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="@_pageSizeOptions" />
        </PagerContent>
    </MudTable>
    <div style="text-align: right; margin-top: 2rem; font-size: 1.1rem; color: #bbb;">
        Last updated: @_lastUpdated?.ToString("yyyy-MM-dd HH:mm:ss")
    </div>
</MudPaper>

@code {
    private MudTable<MobileLeaderboardUserDto> table;
    private LeaderboardFilter _selectedFilter = LeaderboardFilter.ThisWeek;
    private readonly int[] _pageSizeOptions = new[] { 5, 10, 25, 50, 100, 250 };
    private System.Timers.Timer? _refreshTimer;
    private DateTime? _lastUpdated;

    protected override async Task OnInitializedAsync()
    {
        await LoadLeaderboard();

        _refreshTimer = new System.Timers.Timer(60000); // 1 minute
        _refreshTimer.Elapsed += async (_, __) => await InvokeAsync(LoadLeaderboard);
        _refreshTimer.AutoReset = true;
        _refreshTimer.Start();
    }

    private async Task<TableData<MobileLeaderboardUserDto>> ServerReload(TableState state)
    {
        var result = await leaderboardService.GetMobilePaginatedLeaderboard(state.Page, state.PageSize, _selectedFilter, CancellationToken.None);
        _lastUpdated = DateTime.Now;
        StateHasChanged();
        return new TableData<MobileLeaderboardUserDto>() { TotalItems = result.Count, Items = result.Items };
    }

    private async Task LoadLeaderboard()
    {
        if (table != null)
        {
            await table.ReloadServerData();
        }
    }

    private async Task OnFilterChanged(LeaderboardFilter filter)
    {
        _selectedFilter = filter;
        await LoadLeaderboard();
    }

    public void Dispose()
    {
        if (_refreshTimer != null)
        {
            _refreshTimer.Stop();
            _refreshTimer.Dispose();
            _refreshTimer = null;
        }
    }
}
