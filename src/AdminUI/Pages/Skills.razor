@page "/Skills"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SSW.Rewards.Admin.UI.Components.Dialogs.Confirmations
@using SSW.Rewards.Admin.UI.Components
@using SSW.Rewards.Admin.UI.Helpers
@using SSW.Rewards.Shared.DTOs.Skills
@using SSW.Rewards.ApiClient.Services

@attribute [Authorize (Roles = "Staff, Admin")]

@inject ISkillsService skillsService
@inject ISkillsAdminService skillsAdminService
@inject ISnackbar Snackbar
@inject IDialogService DialogService


<MudText Typo="Typo.h2">Skills</MudText>
<MudText Typo="Typo.body1">All Staff Skills</MudText>

<MudTable Items="@Model.OrderBy(s => s.Name)"
          T="SkillDto"
          CanCancelEdit="true"
          Filter="new Func<SkillDto, bool>(FilterItemsFunc)"
          @bind-SelectedItem="@_selectedItem"
          CommitEditTooltip="Commit Edit"
          OnCommitEditClick="OnEditSubmit">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Staff Skills</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col style="width: 50px"/>
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh>Thumbnail</MudTh>
        <MudTh>Name</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Thumbnail">
            @if (!string.IsNullOrEmpty(context.ImageUri))
            {
                <MudImage Src="@context.ImageUri" Width="50" Height="50" />
            }
            else
            {
                <MudPaper Width="50px" Height="50px" Class="d-flex align-items-center justify-content-center">
                    No Image
                </MudPaper>
            }
        </MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Delete"><MudButton OnClick="@(() => OnDeletedClicked(context))">Delete</MudButton></MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Thumbnail">
            @if (!string.IsNullOrEmpty(context.ImageUri))
            {
                <MudImage Src="@context.ImageUri" Width="50" Height="50" />
            }
            else
            {
                <MudPaper Width="50px" Height="50px" Class="d-flex align-items-center justify-content-center">
                    No Image
                </MudPaper>
            }
            <DragDropFileUpload OnClick="OnPhotoUploadClick" Label="Upload thumbnail"/>
        </MudTd>
        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="@context.Name" Required/>
        </MudTd>
        <MudTd />
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

<FabContainer>
    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@((e) => OpenDialog(_disableBackdropClick))"/>
</FabContainer>

@* TODO: Implement Deleting Skills *@
@code {
    private DialogOptions _disableBackdropClick = new() { DisableBackdropClick = true };
    private string _searchString = string.Empty;
    
    private string _imageBase64 = string.Empty;
    private string _imageName = string.Empty;
    
    private SkillDto? _selectedItem;
    private IEnumerable<SkillDto> Model { get; set; } = Enumerable.Empty<SkillDto>();


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            await GetSkills();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task GetSkills()
    {
        Model = (await skillsService.GetSkillsList(CancellationToken.None)).Skills;
    }

    private async Task OpenDialog(DialogOptions options)
    {
        var dialog = DialogService.Show<SSW.Rewards.Admin.UI.Components.Dialogs.Skills.AddSkillDialog>("Create a Skill", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            try
            {
                // Add the Skill
                if (result.Data is SkillEditDto skill)
                {
                    await skillsAdminService.AddOrUpdateSkill(skill, CancellationToken.None);
                }
                await GetSkills();
                Snackbar.Add("Skill added", Severity.Success);
            }
            catch (Exception)
            {
                Snackbar.Add("Failed to add skill", Severity.Error);
            }
        }
    }

    private bool FilterItemsFunc(SkillDto item) => FilterFunc(item, _searchString);

    //! Note: This is only filtering on the name
    private bool FilterFunc(SkillDto item, string searchString)
    {
        return string.IsNullOrWhiteSpace(searchString) || item.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }
    
    private async Task OnPhotoUploadClick(InputFileChangeEventArgs e)
    {
        try
        {
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

            (string base64, string name) = await PhotoUploadHelper.UploadPhoto(e);

            _imageBase64 = base64;
            _imageName = name;
            _selectedItem.ImageUri = $"data:{_imageName};base64,{_imageBase64}";
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to upload the photo - " + ex.Message, Severity.Error);
        }
    }

    private async Task OnEditSubmit()
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

        try
        {
            var editDto = new SkillEditDto
            {
                Id = _selectedItem.Id,
                Name = _selectedItem.Name,
                ImageUri = _selectedItem.ImageUri,
                ImageBytesInBase64 = _imageBase64,
                ImageFileName = _imageName
            };
            
            await skillsAdminService.AddOrUpdateSkill(editDto, CancellationToken.None);
            Snackbar.Add("Updated Skill!", Severity.Success);

            _imageBase64 = string.Empty;
            _imageName = string.Empty;

            await GetSkills();
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex);
            Snackbar.Add("Error Saving", Severity.Error);
        }
    }

    private async Task OnDeletedClicked(SkillDto item)
    {
        var result = await DialogService.Show<SimpleConfirmationDialog>(
            $"Delete \"{item.Name}?\"",
            SimpleConfirmationDialog.CreateDialogParams(
                SimpleConfirmationDialogType.Danger,
                "Deleting will remove this skill from all users")
            ).Result;

        if (!result.Canceled && (bool) result.Data)
        {
            try
            {
                await skillsAdminService.DeleteSkill(item.Id, CancellationToken.None);
                await GetSkills();
                Snackbar.Add("Deleted", Severity.Success);
            }
            catch (Exception)
            {
                Snackbar.Add("Error Deleting", Severity.Error);
            }
        }
        
    }
    

}