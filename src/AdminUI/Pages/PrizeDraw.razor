@page "/Prizedraw"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SSW.Rewards.Enums
@using SSW.Rewards.Shared.DTOs.Achievements
@using SSW.Rewards.Shared.DTOs.PrizeDraw
@using SSW.Rewards.Shared.DTOs.Rewards
@using SSW.Rewards.ApiClient.Services

@attribute [Authorize (Roles = "Admin")]

@inject IAchievementService AchievementService
@inject IPrizeDrawService PrizeDrawService
@inject IRewardService RewardService
@inject IRewardAdminService RewardAdminService
@inject ISnackbar SnackBar
@inject IJSRuntime JsRuntime

<MudText Typo="Typo.h2">Prize Draw</MudText>

@if (_loading)
{
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true"/>
}
else
{
    <MudGrid Spacing="2">
        <MudItem>
            <MudAutocomplete
                T="AchievementDto"
                @bind-Value="@_selectedAchievement"
                Variant="Variant.Filled"
                Label="Required Achievement"
                AnchorOrigin="Origin.BottomCenter"
                SearchFuncWithCancel="@SearchAchievements"
                ShowProgressIndicator="true"
                ToStringFunc="@GetAchievementName"
            />
        </MudItem>
        <MudItem>
            <MudSelect
                Style="width: 250px;"
                T="LeaderboardFilter"
                @bind-Value="@_filter"
                Label="Players with Points Since"
                Variant="Variant.Filled"
                AnchorOrigin="Origin.BottomCenter">
                @foreach (var when in Enum.GetValues<LeaderboardFilter>())
                {
                    <MudSelectItem T="LeaderboardFilter" Value="@when">@when.ToString()</MudSelectItem>
                }
            </MudSelect>
        </MudItem>        
        <MudItem>
            <MudTextField
                Label="Leaderboard Top X"
                Variant="Variant.Filled"
                Type="InputType.Number"
                @bind-Value="_top"/>
        </MudItem>
        <MudItem>
            <MudCheckBox T="bool"
                         Value="_filterStaff"
                         Label="Filter staff"
                         ValueChanged="(e) => _filterStaff = e!"/>
        </MudItem>

        @if (_previousWinners.Count > 0)
        {
            <MudItem>
                <MudCheckBox T="bool"
                             Value="_excludePreviousWinners"
                             Label="Exclude previous winners from this session"
                             ValueChanged="(e) => _excludePreviousWinners = e!"/>
            </MudItem>
        }

        <MudItem>
            <MudButton
                OnClick="@(async () => await LoadEligiblePlayers())"
                Variant="Variant.Filled"
                StartIcon="@MudBlazor.Icons.Material.Filled.Search"
                Color="Color.Primary">
                Get eligible winners
            </MudButton>
        </MudItem>

        @if (_previousWinners.Count > 0)
        {
            <MudItem>
                <MudButton
                    OnClick="@(async () => await ClearPreviousWinners())"
                    Variant="Variant.Outlined"
                    StartIcon="@MudBlazor.Icons.Material.Filled.Clear"
                    Color="Color.Error">
                    Clear Previous Winners
                </MudButton>
            </MudItem>
        }
    </MudGrid>
    
    <MudDivider DividerType="DividerType.Middle" Class="my-6"/>
    
    <MudGrid Justify="Justify.Center">
        <MudItem>
            <MudText Align="Align.Left">Eligible Players: @(_players?.Count ?? 0)</MudText>
        </MudItem>
    </MudGrid>
    
    <MudDivider DividerType="DividerType.Middle" Class="my-6"/>
    
    <MudGrid Spacing="2">
        <MudItem>
            <MudChipSet MultiSelection="false">
                @if (_players != null)
                {
                    @foreach (var player in _players.Select((p, index) => new { p, index }))
                    {
                        <MudChip
                            Size="@(IsWinner(player.p) ? Size.Large : Size.Small)"
                            Variant="@(IsWinner(player.p) ? Variant.Filled : Variant.Text)"
                            Icon="@(IsWinner(player.p) ? MudBlazor.Icons.Material.Filled.Celebration : null)"
                            Color="@_colors[player.index % _colors.Length]">@(player.p.Name)</MudChip>
                    }   
                }
            </MudChipSet>
        </MudItem>
    </MudGrid>
    
    <MudDivider DividerType="DividerType.Middle" Class="my-12"/>
    
    @if (_isDrawingPrize || _prizeWinner != null)
    {
        <MudGrid Justify="Justify.Center">
            <MudItem>
                @if (_isDrawingPrize)
                {
                    <MudText Align="Align.Center">
                        Shuffling things around...
                    </MudText>
                    <MudText Align="Align.Center">
                        <MudProgressCircular Color="Color.Success" Indeterminate="true"/>
                    </MudText>
                }
                else if(_prizeWinner != null)
                {
                    <MudText Align="Align.Center">The Winner is:</MudText>
                    <MudText Align="Align.Center" Typo="Typo.h3">
                        <b>@(_prizeWinner.Name)</b>
                    </MudText>    
                }
            </MudItem>
        </MudGrid>    
    }
    
    @if (_prizeWinner != null && !_isDrawingPrize)
    {
        <MudGrid Spacing="2" Justify="Justify.Center">
            <MudItem>
                <MudAutocomplete
                    T="RewardDto"
                    @bind-Value="@_selectedReward"
                    Variant="Variant.Filled"
                    Label="Reward"
                    AnchorOrigin="Origin.BottomCenter"
                    SearchFuncWithCancel="@SearchRewards"
                    ShowProgressIndicator="true"
                    ToStringFunc="@GetRewardName"
                />
            </MudItem>
        </MudGrid>
        <MudGrid Spacing="2" Justify="Justify.Center">
            <MudItem>
                <MudButton
                    OnClick="@(async _ => await ClaimPrizeForWinner(_prizeWinner))"
                    Disabled="@(_selectedReward == null)"
                    Variant="Variant.Filled"
                    StartIcon="@MudBlazor.Icons.Material.Filled.Celebration"
                    Color="Color.Info">
                    Claim Prize
                </MudButton>
            </MudItem>
            <MudItem>
                <MudButton
                    OnClick="@(async _ => await SkipWinner(_prizeWinner))"
                    Variant="Variant.Outlined"
                    StartIcon="@MudBlazor.Icons.Material.Filled.Clear"
                    Color="Color.Info">
                    Skip
                </MudButton>
            </MudItem>
        </MudGrid>
    }
    
    @if (_players is {Count: > 0 } && !_isDrawingPrize && _prizeWinner == null)
    {
        <MudDivider DividerType="DividerType.Middle" Class="my-6"/>
        
        <MudGrid Spacing="2" Justify="Justify.Center">
            <MudItem>
                <MudButton
                    OnClick="DrawPrizeWinner"
                    Variant="Variant.Filled"
                    StartIcon="@MudBlazor.Icons.Material.Filled.Celebration"
                    Color="Color.Primary"
                    Style="width: 400px; height: 60px;">
                    Draw prize winner!
                </MudButton>
            </MudItem>
        </MudGrid>
    }
}

@code {
    private readonly Color[] _colors = { Color.Primary, Color.Secondary, Color.Tertiary, Color.Info, Color.Warning, Color.Success, Color.Error };
    private SessionStorage _storage;

    private static int PrizeDrawSuspenseDelay => 2500;

    private bool _loading = false;
    private bool _isDrawingPrize = false;

    private List<EligibleUserDto>? _players = [];
    AchievementDto? _selectedAchievement;
    RewardDto? _selectedReward;
    private LeaderboardFilter _filter = LeaderboardFilter.Today;
    private int _top;
    private bool _filterStaff = true;
    private EligibleUserDto? _prizeWinner;
    private HashSet<string> _previousWinners = [];
    private bool _excludePreviousWinners = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _storage = new SessionStorage(JsRuntime);
        _previousWinners = await _storage.LoadWinners();
    }

    private async Task<IEnumerable<AchievementDto>> SearchAchievements(string value, CancellationToken cancellationToken)
    {
        var achievements = await AchievementService.SearchAchievements(value, cancellationToken);

        return achievements.Achievements;
    }
    
    private async Task<IEnumerable<RewardDto>> SearchRewards(string value, CancellationToken cancellationToken)
    {
        var rewards = await RewardService.SearchRewards(value, cancellationToken);

        // Only show hidden 1-point rewards that were designed for prize draws
        // TODO: improve the handling of assigning and filtering prize draw items
        return rewards.Rewards.Where(r => r.Cost == 1);
    }

    private async Task LoadEligiblePlayers()
    {
        try
        {
            _loading = true;
            Reset();

            var filter = new GetEligibleUsersFilter
            {
                AchievementId = _selectedAchievement?.Id,
                Filter = _filter,
                FilterStaff = _filterStaff,
                Top = _top,
            };

            var eligibleUsersVm = await PrizeDrawService.GetEligibleUsers(filter, CancellationToken.None);
            var eligiblePlayers = eligibleUsersVm.EligibleUsers.ToList();

            if (_excludePreviousWinners)
            {
                eligiblePlayers = eligiblePlayers
                    .Where(p => !_previousWinners.Contains(p.UserId.ToString()))
                    .ToList();
            }

            _players = eligiblePlayers;
            _loading = false;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
    
    private async Task DrawPrizeWinner()
    {
        _isDrawingPrize = true;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(PrizeDrawSuspenseDelay);
        
        var eligiblePlayers = _players?.ToList() ?? [];

        if (!eligiblePlayers.Any())
        {
            SnackBar.Add("No eligible players remaining!", Severity.Warning);
            _isDrawingPrize = false;
            return;
        }

        Random rand = new();
        _prizeWinner = eligiblePlayers.ElementAt(rand.Next(eligiblePlayers.Count()));
        _isDrawingPrize = false;
    }

    private bool IsWinner(EligibleUserDto? player) 
    {
        if (player == null || _prizeWinner == null)
        {
            return false;
        }
        return player.UserId == _prizeWinner.UserId;
    }

    private void Reset()
    {
        _prizeWinner = null;
        _selectedReward = null;
    }

    private async Task ClaimPrizeForWinner(EligibleUserDto winner)
    {
        if (_selectedReward != null)
        {
            var result = await RewardAdminService.ClaimForUser(_selectedReward.Code, winner.UserId ?? 0, false, CancellationToken.None);

            if (result.status == RewardStatus.Claimed)
            {
                if (_excludePreviousWinners && winner.UserId != null)
                {
                    _previousWinners.Add(winner.UserId.ToString());
                    await _storage.SaveWinner(winner.UserId.ToString());
                }

                SnackBar.Add($"{_selectedReward.Name} successfully claimed for {winner.Name}!", Severity.Success, options =>
                {
                    options.VisibleStateDuration = 10000;
                });

                _players?.RemoveAll(p => p.UserId == winner.UserId);

                Reset();
            }
            else
            {
                SnackBar.Add($"Could not claim reward!\n\n{result.status}", Severity.Error);
            }
        }
        else
        {
            SnackBar.Add($"Reward not valid", Severity.Error);
        }
    }

    private async Task SkipWinner(EligibleUserDto winner)
    {
        _players?.RemoveAll(p => p.UserId == winner.UserId);
        Reset();
        await DrawPrizeWinner();
    }

    private static string GetAchievementName(AchievementDto? achievement)
    {
        return achievement?.Name ?? string.Empty;
    }

    private static string GetRewardName(RewardDto? reward)
    {
        return reward?.Name ?? string.Empty;
    }

    private async Task ClearPreviousWinners()
    {
        await _storage.ClearWinners();
        _previousWinners.Clear();
        SnackBar.Add("Previous winners cleared!", Severity.Success);
    }

    private class SessionStorage(IJSRuntime jsRuntime)
    {
        private const string PreviousWinnersKey = "ssw-rewards-previous-winners";

        public async Task<HashSet<string>> LoadWinners()
        {
            var winnersJson = await jsRuntime.InvokeAsync<string>("sessionStorage.getItem", PreviousWinnersKey);
            if (string.IsNullOrEmpty(winnersJson))
                return [];

            var winners = System.Text.Json.JsonSerializer.Deserialize<List<string>>(winnersJson);
            return [..winners ?? []];
        }

        public async Task SaveWinner(string userId)
        {
            var winners = await LoadWinners();
            winners.Add(userId);
            var winnersJson = System.Text.Json.JsonSerializer.Serialize(winners.ToList());
            await jsRuntime.InvokeVoidAsync("sessionStorage.setItem", PreviousWinnersKey, winnersJson);
        }

        public async Task ClearWinners()
        {
            await jsRuntime.InvokeVoidAsync("sessionStorage.removeItem", PreviousWinnersKey);
        }
    }
}