@page "/Prizedraw"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SSW.Rewards.Admin.UI.Components
@using SSW.Rewards.Admin.UI.Models
@using SSW.Rewards.Admin.UI.Services
@using SSW.Rewards.Enums
@using SSW.Rewards.Shared.DTOs.Achievements
@using SSW.Rewards.Shared.DTOs.PrizeDraw
@using SSW.Rewards.Shared.DTOs.Rewards
@using SSW.Rewards.ApiClient.Services
@using SSW.Rewards.Application.Common.Interfaces

@attribute [Authorize(Roles = "Admin")]

@inject IAchievementService AchievementService
@inject IPrizeDrawManager PrizeDrawManager
@inject IRewardAdminService RewardAdminService
@inject IWinnerStorageService WinnerStorageService
@inject ISnackbar SnackBar
@inject IDialogService DialogService
@inject IDateTime DateTimeService

<MudText Typo="Typo.h2">Prize Draw</MudText>

<MudPaper Elevation="2" Class="pa-4 mb-4">
    <MudGrid Spacing="2">
        <MudItem xs="12" sm="6" md="4">
            <MudSelect
                T="LeaderboardFilter"
                @bind-Value="@_filter"
                Margin="Margin.Dense"
                Dense="true"
                Label="Players with Points Since"
                Variant="Variant.Outlined"
                AnchorOrigin="Origin.BottomCenter"
                FullWidth="true">
                @foreach (var filter in GetOrderedFilters())
                {
                    <MudSelectItem T="LeaderboardFilter" Value="@filter">@GetFilterDisplayName(filter)</MudSelectItem>
                }
            </MudSelect>
        </MudItem>

        <MudItem xs="12" sm="6" md="4">
            <MudAutocomplete
                T="AchievementDto"
                @bind-Value="@_selectedAchievement"
                Variant="Variant.Outlined"
                Margin="Margin.Dense"
                Dense="true"
                Label="Required Achievement (Optional)"
                AnchorOrigin="Origin.BottomCenter"
                SearchFuncWithCancel="@SearchAchievements"
                ShowProgressIndicator="true"
                ToStringFunc="@GetAchievementName"
                FullWidth="true"
                Clearable="true"
                ResetValueOnEmptyText="true"/>
        </MudItem>

        <MudItem xs="12" sm="6" md="4">
            <MudNumericField
                Label="Leaderboard Top X (Optional)"
                Variant="Variant.Outlined"
                Margin="Margin.Dense"
                Dense="true"
                Min="1"
                Clearable="true"
                @bind-Value="_top"
                FullWidth="true"/>
        </MudItem>

        <MudItem xs="8">
            <MudPaper Elevation="0" Class="d-flex flex-wrap gap-4">
                <MudCheckBox T="bool"
                             Color="Color.Primary"
                             @bind-Value="_excludeStaff"
                             Label="Exclude staff"/>
                <MudCheckBox T="bool"
                             Color="Color.Primary"
                             @bind-Value="_excludePreviousWinners"
                             Label="Exclude previous winners"/>
            </MudPaper>
        </MudItem>

        <MudItem xs="4" Class="d-flex justify-end">
            <MudButton
                OnClick="@LoadEligiblePlayersAsync"
                Variant="Variant.Filled"
                StartIcon="@MudBlazor.Icons.Material.Filled.Search"
                Size="Size.Medium"
                Color="Color.Primary"
                Disabled="@_loading">
                @if (_loading)
                {
                    <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate="true"/>
                }
                Get eligible winners
            </MudButton>
        </MudItem>
    </MudGrid>
</MudPaper>

<MudGrid>
    <MudItem xs="12" sm="8">
        @if (_loading)
        {
            <MudGrid Justify="Justify.Center">
                <MudItem>
                    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
                </MudItem>
            </MudGrid>
        }
        else
        {
            <MudGrid Justify="Justify.Center">
                <MudItem>
                    <MudText Typo="Typo.h5" Align="Align.Center">Eligible Players</MudText>
                    <MudText Align="Align.Center">@EligiblePlayersCountText</MudText>
                </MudItem>
            </MudGrid>

            <MudGrid Spacing="2">
                <MudItem>
                    <MudChipSet MultiSelection="false">
                        @if (_players != null)
                        {
                            @foreach (var player in _players.Select((p, index) => new { p, index }))
                            {
                                <MudChip
                                    Size="Size.Small"
                                    Variant="Variant.Text"
                                    Color="@_colors[player.index % _colors.Length]">@(player.p.Name)</MudChip>
                            }
                        }
                    </MudChipSet>
                </MudItem>
            </MudGrid>

            @if (HasEligiblePlayers)
            {
                <MudDivider DividerType="DividerType.Middle" Class="my-6"/>

                <MudGrid Spacing="2" Justify="Justify.Center">
                    <MudItem>
                        <MudButton
                            OnClick="DrawPrizeWinnerAsync"
                            Variant="Variant.Filled"
                            StartIcon="@MudBlazor.Icons.Material.Filled.Celebration"
                            Color="Color.Primary"
                            Style="width: 400px; height: 60px;"
                            Disabled="@(!CanDrawPrize)">
                            Draw prize winner!
                        </MudButton>
                    </MudItem>
                </MudGrid>
            }
        }
    </MudItem>

    <MudItem xs="12" sm="4">
        <MudPaper Elevation="3" Class="pa-4 ml-2 mb-2">
            <div class="d-flex justify-space-between align-center mb-2">
                <MudText Typo="Typo.h5">Previous Winners</MudText>
                @if (_previousWinners.Count > 0)
                {
                    <MudButton
                        StartIcon="@MudBlazor.Icons.Material.Filled.Clear"
                        Color="Color.Error"
                        Size="Size.Small"
                        Variant="Variant.Outlined"
                        OnClick="@ClearPreviousWinnersAsync">
                        Clear
                    </MudButton>
                }
            </div>
            <MudDivider Class="mb-3"/>
            <div class="d-flex flex-column gap-2">
                @if (_previousWinners.Count > 0)
                {
                    foreach (var winner in _previousWinners)
                    {
                        <div class="d-flex align-center pa-1 gap-2">
                            <MudIcon Icon="@MudBlazor.Icons.Material.Filled.EmojiEvents" Color="Color.Success" Size="Size.Small"/>
                            <MudText Typo="Typo.body1" Color="Color.Success">@winner.Name</MudText>
                        </div>
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Info" Class="pa-2 text-center">
                        No previous winners recorded
                    </MudText>
                }
            </div>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private readonly Color[] _colors = [Color.Primary, Color.Secondary, Color.Tertiary, Color.Info, Color.Warning, Color.Success, Color.Error];
    
    private static int PrizeDrawSuspenseDelay => 2500;
    private bool _loading;
    private bool _isDrawingPrize;

    private List<EligibleUserDto>? _players = [];
    private AchievementDto? _selectedAchievement;
    private LeaderboardFilter _filter = LeaderboardFilter.Today;
    private int? _top;
    private bool _excludeStaff = true;
    private List<Winner> _previousWinners = [];
    private bool _excludePreviousWinners = true;

    private bool CanDrawPrize => _players is { Count: > 0 } && !_isDrawingPrize && !_loading;
    private bool HasEligiblePlayers => _players?.Count > 0;
    private string EligiblePlayersCountText => $"Total: {_players?.Count ?? 0}";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadPreviousWinnersAsync();
    }

    private async Task LoadPreviousWinnersAsync()
    {
        try
        {
            _previousWinners = await WinnerStorageService.LoadWinnersAsync();
        }
        catch (Exception)
        {
            ShowError("Failed to load previous winners");
        }
    }

    private async Task<IEnumerable<AchievementDto>> SearchAchievements(string value, CancellationToken cancellationToken)
    {
        try
        {
            var achievements = await AchievementService.SearchAchievements(value, cancellationToken);
            return achievements.Achievements;
        }
        catch (Exception)
        {
            ShowError("Failed to search achievements");
            return [];
        }
    }

    private async Task LoadEligiblePlayersAsync()
    {
        try
        {
            _loading = true;

            var (dateFrom, dateTo) = PrizeDrawManager.GetDateRangeForFilter(_filter, DateTimeService);

            var filter = new GetEligibleUsersFilter
            {
                AchievementId = _selectedAchievement?.Id,
                DateFrom = dateFrom,
                DateTo = dateTo,
                FilterStaff = _excludeStaff,
                Top = _top,
            };

            _players = await PrizeDrawManager.GetEligiblePlayersAsync(filter, _previousWinners, _excludePreviousWinners);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception)
        {
            ShowError("Failed to load eligible players. Please try again.");
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task DrawPrizeWinnerAsync()
    {
        var loadingDialog = ShowLoadingDialog();
        
        try
        {
            _isDrawingPrize = true;
            await InvokeAsync(StateHasChanged);
            await Task.Delay(PrizeDrawSuspenseDelay);

            var winner = PrizeDrawManager.SelectRandomWinner(_players?.ToList() ?? new List<EligibleUserDto>());
            if (winner == null)
            {
                SnackBar.Add("No eligible players remaining!", Severity.Warning);
                return;
            }

            await ShowWinnerDialog(winner);
        }
        catch (Exception)
        {
            ShowError("Failed to draw prize winner. Please try again.");
        }
        finally
        {
            loadingDialog.Close();
            _isDrawingPrize = false;
        }
    }

    private IDialogReference ShowLoadingDialog()
    {
        var loadingParameters = new DialogParameters
        {
            ["LoadingText"] = "Shuffling things around..."
        };

        var loadingOptions = new DialogOptions
        {
            CloseOnEscapeKey = false,
            DisableBackdropClick = true,
            NoHeader = true,
            MaxWidth = MaxWidth.Small
        };

        return DialogService.Show<LoadingDialog>("", loadingParameters, loadingOptions);
    }

    private async Task ShowWinnerDialog(EligibleUserDto winner)
    {
        var parameters = new DialogParameters
        {
            ["Winner"] = winner,
            ["OnClaimPrize"] = EventCallback.Factory.Create<(EligibleUserDto, RewardDto)>(this,
                async args => await ClaimPrizeForWinnerAsync(args.Item1, args.Item2)),
            ["OnSkipWinner"] = EventCallback.Factory.Create<EligibleUserDto>(this,
                async user => await SkipWinnerAsync(user))
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = false,
            DisableBackdropClick = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

        await DialogService.ShowAsync<WinnerDialog>("Prize Winner!", parameters, options);
    }

    private async Task ClaimPrizeForWinnerAsync(EligibleUserDto winner, RewardDto reward)
    {
        try
        {
            var result = await RewardAdminService.ClaimForUser(reward.Code, winner.UserId ?? 0, false, CancellationToken.None);

            if (result.status == RewardStatus.Claimed)
            {
                if (winner.UserId != null)
                {
                    await WinnerStorageService.SaveWinnerAsync(winner.UserId.ToString(), winner.Name ?? string.Empty);
                    await LoadPreviousWinnersAsync();
                }

                SnackBar.Add($"{reward.Name} successfully claimed for {winner.Name}!", Severity.Success, 
                    options => { options.VisibleStateDuration = 10000; });

                _players?.RemoveAll(p => p.UserId == winner.UserId);
            }
            else
            {
                SnackBar.Add($"Could not claim reward!\n\n{result.status}", Severity.Error);
            }
        }
        catch (Exception)
        {
            SnackBar.Add("Failed to claim prize. Please try again.", Severity.Error);
        }
    }

    private async Task SkipWinnerAsync(EligibleUserDto winner)
    {
        _players?.RemoveAll(p => p.UserId == winner.UserId);

        // Only auto-draw another winner if there are still players left
        if (_players?.Count > 0)
        {
            await DrawPrizeWinnerAsync();
        }
        else
        {
            SnackBar.Add("No eligible players remaining!", Severity.Warning);
        }
    }

    private static string GetAchievementName(AchievementDto? achievement) => achievement?.Name ?? string.Empty;

    private async Task ClearPreviousWinnersAsync()
    {
        try
        {
            await WinnerStorageService.ClearWinnersAsync();
            _previousWinners.Clear();
            SnackBar.Add("Previous winners cleared!", Severity.Success);
        }
        catch (Exception)
        {
            ShowError("Failed to clear previous winners");
        }
    }

    private void ShowError(string message)
    {
        SnackBar.Add(message, Severity.Error);
        StateHasChanged();
    }

    private static LeaderboardFilter[] GetOrderedFilters() =>
    [
        LeaderboardFilter.Today,
        LeaderboardFilter.ThisWeek,
        LeaderboardFilter.ThisMonth,
        LeaderboardFilter.ThisYear,
        LeaderboardFilter.Forever
    ];

    private static string GetFilterDisplayName(LeaderboardFilter filter) =>
        filter switch
        {
            LeaderboardFilter.Today => "Today",
            LeaderboardFilter.ThisWeek => "This Week",
            LeaderboardFilter.ThisMonth => "This Month",
            LeaderboardFilter.ThisYear => "This Year",
            LeaderboardFilter.Forever => "All Time",
            _ => filter.ToString()
        };
}